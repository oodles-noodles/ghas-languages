name: Check Secret Alerts in Branch

on:
  push:
    branches: [ main, develop, 'feature/*', 'hotfix/*' ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

permissions:
  contents: read
  security-events: write
  pull-requests: write

jobs:
  check-secret-alerts-commits:
    runs-on: ubuntu-latest
    name: Check Secret Alert Commits in Branch
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch full history to analyze commits
        
    - name: Get current branch information
      id: branch-info
      run: |
        if [ "${{ github.event_name }}" = "pull_request" ]; then
          echo "current_branch=${{ github.head_ref }}" >> $GITHUB_OUTPUT
          echo "Working on PR branch: ${{ github.head_ref }}"
        else
          echo "current_branch=${{ github.ref_name }}" >> $GITHUB_OUTPUT
          echo "Working on branch: ${{ github.ref_name }}"
        fi
        
        # Get all commits in current branch
        git log --format="%H" origin/${{ github.ref_name }} > branch-commits.txt
        commit_count=$(wc -l < branch-commits.txt)
        echo "branch_commit_count=$commit_count" >> $GITHUB_OUTPUT
        echo "Found $commit_count commits in current branch"
        
    - name: List secret scanning alerts
      env:
        GH_TOKEN: ${{ github.token }}
      id: list-alerts
      run: |
        echo "Fetching secret scanning alerts from repository..."
        
        # Create output directory
        mkdir -p alert-analysis
        
        # Fetch all secret scanning alerts using gh cli pagination
        echo "Fetching all secret scanning alerts (using --paginate)..."
        gh api \
          --paginate \
          -H "Accept: application/vnd.github+json" \
          -H "X-GitHub-Api-Version: 2022-11-28" \
          "/repos/${{ github.repository }}/secret-scanning/alerts?state=open&per_page=100" \
          > alert-analysis/alerts.json
        
        alert_count=$(jq length alert-analysis/alerts.json)
        echo "alert_count=$alert_count" >> $GITHUB_OUTPUT
        echo "Found $alert_count total open secret scanning alerts"
        
        # Extract basic alert information
        echo "Alert Summary:" > alert-analysis/alert-summary.txt
        jq -r '.[] | "Alert #\(.number): \(.secret_type) in \(.locations[0].path) (lines \(.locations[0].start_line)-\(.locations[0].end_line))"' alert-analysis/alerts.json >> alert-analysis/alert-summary.txt
        
        cat alert-analysis/alert-summary.txt
        
    - name: Find commits for each alert
      id: find-commits
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        echo "Finding commits where each secret alert was found..."
        
        alerts_with_commits=0
        
        # Initialize the commits analysis file
        echo "# Secret Alert Commit Analysis" > alert-analysis/commit-analysis.md
        echo "" >> alert-analysis/commit-analysis.md
        echo "**Repository:** ${{ github.repository }}" >> alert-analysis/commit-analysis.md
        echo "**Branch:** ${{ steps.branch-info.outputs.current_branch }}" >> alert-analysis/commit-analysis.md
        echo "**Total Alerts:** ${{ steps.list-alerts.outputs.alert_count }}" >> alert-analysis/commit-analysis.md
        echo "" >> alert-analysis/commit-analysis.md
        
        if [ "${{ steps.list-alerts.outputs.alert_count }}" -eq 0 ]; then
          echo "No alerts to analyze."
          echo "**Status:** ✅ No secret scanning alerts found" >> alert-analysis/commit-analysis.md
        else
          echo "## Alert Commit Analysis" >> alert-analysis/commit-analysis.md
          echo "" >> alert-analysis/commit-analysis.md
          
          # Process each alert
          jq -c '.[]' alert-analysis/alerts.json | while read -r alert; do
            alert_number=$(echo "$alert" | jq -r '.number')
            secret_type=$(echo "$alert" | jq -r '.secret_type')
            alert_url=$(echo "$alert" | jq -r '.html_url')
            locations_url=$(echo "$alert" | jq -r '.locations_url')
            
            echo "### Alert #$alert_number: $secret_type" >> alert-analysis/commit-analysis.md
            echo "**URL:** [$alert_url]($alert_url)" >> alert-analysis/commit-analysis.md
            echo "" >> alert-analysis/commit-analysis.md
            
            echo "Fetching locations for alert #$alert_number..."
            
            # Fetch detailed locations from the locations_url with pagination
            gh api \
              --paginate \
              -H "Accept: application/vnd.github+json" \
              -H "X-GitHub-Api-Version: 2022-11-28" \
              "$locations_url" \
              > "alert-analysis/alert-${alert_number}-locations.json"
            
            # Initialize commit hashes file for this alert
            > "alert-analysis/alert-${alert_number}-commit-hashes.txt"
            
            # Extract commit SHAs from locations
            echo "**Commit locations for this alert:**" >> alert-analysis/commit-analysis.md
            
            commit_locations_found=0
            total_locations=0
            
            # Process each location and filter for commit types
            jq -c '.[]' "alert-analysis/alert-${alert_number}-locations.json" | while read -r location; do
              total_locations=$((total_locations + 1))
              location_type=$(echo "$location" | jq -r '.type')
              
              if [ "$location_type" = "commit" ]; then
                # Extract commit details
                path=$(echo "$location" | jq -r '.details.path')
                start_line=$(echo "$location" | jq -r '.details.start_line')
                end_line=$(echo "$location" | jq -r '.details.end_line')
                commit_sha=$(echo "$location" | jq -r '.details.commit_sha')
                commit_url=$(echo "$location" | jq -r '.details.commit_url')
                
                # Save commit SHA associated with this alert
                echo "$commit_sha" >> "alert-analysis/alert-${alert_number}-commit-hashes.txt"
                
                # Log commit details
                echo "- **Commit:** \`$commit_sha\` in \`$path\` (lines $start_line-$end_line)" >> alert-analysis/commit-analysis.md
                echo "  - [View Commit]($commit_url)" >> alert-analysis/commit-analysis.md
                
                commit_locations_found=$((commit_locations_found + 1))
                
              elif [ "$location_type" = "wiki_commit" ]; then
                # Handle wiki commits (also have commit_sha)
                path=$(echo "$location" | jq -r '.details.path')
                commit_sha=$(echo "$location" | jq -r '.details.commit_sha')
                page_url=$(echo "$location" | jq -r '.details.page_url')
                
                # Save wiki commit SHA associated with this alert
                echo "$commit_sha" >> "alert-analysis/alert-${alert_number}-commit-hashes.txt"
                
                # Log wiki commit details
                echo "- **Wiki Commit:** \`$commit_sha\` in wiki page \`$path\`" >> alert-analysis/commit-analysis.md
                echo "  - [View Wiki Page]($page_url)" >> alert-analysis/commit-analysis.md
                
                commit_locations_found=$((commit_locations_found + 1))
              fi
            done
            
            # Count total commits found for this alert
            if [ -s "alert-analysis/alert-${alert_number}-commit-hashes.txt" ]; then
              commit_count=$(wc -l < "alert-analysis/alert-${alert_number}-commit-hashes.txt")
              alerts_with_commits=$((alerts_with_commits + 1))
              echo "**Commits found:** $commit_count" >> alert-analysis/commit-analysis.md
              echo "Found $commit_count commit(s) for alert #$alert_number"
            else
              echo "**Commits found:** 0 (secret found in non-commit locations only)" >> alert-analysis/commit-analysis.md
              echo "No commits found for alert #$alert_number"
            fi
            
            # Show summary of location types
            non_commit_locations=$((total_locations - commit_locations_found))
            if [ $non_commit_locations -gt 0 ]; then
              echo "**Non-commit locations:** $non_commit_locations (issues, PRs, discussions, etc.)" >> alert-analysis/commit-analysis.md
            fi
            
            echo "" >> alert-analysis/commit-analysis.md
          done
        fi
        
        echo "alerts_with_commits=$alerts_with_commits" >> $GITHUB_OUTPUT
        echo "Analyzed commits for $alerts_with_commits alerts"
        
    - name: Check if alert commits exist in current branch
      id: check-branch-commits
      run: |
        echo "Checking if alert commits exist in current branch..."
        
        alerts_in_branch=0
        total_alert_commits=0
        branch_alert_commits=0
        
        echo "## Branch Commit Analysis" >> alert-analysis/commit-analysis.md
        echo "" >> alert-analysis/commit-analysis.md
        
        # Process each alert's commits
        for alert_commits_file in alert-analysis/alert-*-commit-hashes.txt; do
          if [ -f "$alert_commits_file" ]; then
            alert_number=$(echo "$alert_commits_file" | sed 's/.*alert-\([0-9]*\)-commit-hashes.txt/\1/')
            echo "Checking commits for Alert #$alert_number..."
            
            echo "### Alert #$alert_number Commit Status" >> alert-analysis/commit-analysis.md
            
            alert_has_commits_in_branch=false
            
            while read -r commit_hash; do
              total_alert_commits=$((total_alert_commits + 1))
              
              # Check if this commit exists in the current branch
              if git merge-base --is-ancestor "$commit_hash" HEAD 2>/dev/null; then
                echo "- ✅ \`$commit_hash\` - **IN BRANCH**" >> alert-analysis/commit-analysis.md
                branch_alert_commits=$((branch_alert_commits + 1))
                alert_has_commits_in_branch=true
              else
                echo "- ❌ \`$commit_hash\` - Not in branch" >> alert-analysis/commit-analysis.md
              fi
            done < "$alert_commits_file"
            
            if [ "$alert_has_commits_in_branch" = true ]; then
              alerts_in_branch=$((alerts_in_branch + 1))
              echo "**Status: ⚠️  Alert commits found in branch**" >> alert-analysis/commit-analysis.md
            else
              echo "**Status: ✅ No alert commits in branch**" >> alert-analysis/commit-analysis.md
            fi
            
            echo "" >> alert-analysis/commit-analysis.md
          fi
        done
        
        echo "" >> alert-analysis/commit-analysis.md
        echo "## Final Summary" >> alert-analysis/commit-analysis.md
        echo "- **Total alerts analyzed:** ${{ steps.list-alerts.outputs.alert_count }}" >> alert-analysis/commit-analysis.md
        echo "- **Alerts with commits in branch:** $alerts_in_branch" >> alert-analysis/commit-analysis.md
        echo "- **Total alert-related commits:** $total_alert_commits" >> alert-analysis/commit-analysis.md
        echo "- **Alert commits in current branch:** $branch_alert_commits" >> alert-analysis/commit-analysis.md
        
        echo "alerts_in_branch=$alerts_in_branch" >> $GITHUB_OUTPUT
        echo "total_alert_commits=$total_alert_commits" >> $GITHUB_OUTPUT
        echo "branch_alert_commits=$branch_alert_commits" >> $GITHUB_OUTPUT
        
        if [ $alerts_in_branch -gt 0 ]; then
          echo "branch_has_alert_commits=true" >> $GITHUB_OUTPUT
          echo "⚠️  Found $alerts_in_branch alert(s) with commits in current branch"
        else
          echo "branch_has_alert_commits=false" >> $GITHUB_OUTPUT
          echo "✅ No alert commits found in current branch"
        fi
        
    - name: Upload analysis artifacts
      uses: actions/upload-artifact@v4
      with:
        name: secret-alert-commit-analysis-${{ github.run_id }}
        path: alert-analysis/
        retention-days: 30
        
    - name: Comment on PR (if pull request)
      if: github.event_name == 'pull_request'
      run: |
        echo "Adding commit analysis to PR..."
        
        cat > pr-comment.md << 'EOF'
        ## 🔍 Secret Alert Commit Analysis
        
        EOF
        cat alert-analysis/commit-analysis.md >> pr-comment.md
        
        if [ "${{ steps.check-branch-commits.outputs.branch_has_alert_commits }}" = "true" ]; then
          cat >> pr-comment.md << 'EOF'
        
        ---
        ⚠️  **Action Required:** This branch contains commits that are associated with secret scanning alerts.
        EOF
        else
          cat >> pr-comment.md << 'EOF'
        
        ---
        ✅ **All Clear:** No commits associated with secret scanning alerts found in this branch.
        EOF
        fi
        
        gh pr comment ${{ github.event.number }} --body-file pr-comment.md
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Set final job status
      run: |
        echo "=== SECRET ALERT COMMIT ANALYSIS COMPLETE ==="
        echo "Total Alerts: ${{ steps.list-alerts.outputs.alert_count }}"
        echo "Alerts with commits in branch: ${{ steps.check-branch-commits.outputs.alerts_in_branch }}"
        echo "Total alert commits: ${{ steps.check-branch-commits.outputs.total_alert_commits }}"
        echo "Alert commits in branch: ${{ steps.check-branch-commits.outputs.branch_alert_commits }}"
        
        if [ "${{ steps.check-branch-commits.outputs.branch_has_alert_commits }}" = "true" ]; then
          echo "::warning title=Alert Commits Found::Found commits associated with ${{ steps.check-branch-commits.outputs.alerts_in_branch }} secret alert(s) in this branch"
        else
          echo "::notice title=No Alert Commits::No commits associated with secret alerts found in this branch"
        fi
        
        echo "::notice title=Analysis Complete::Detailed analysis available in artifacts"
